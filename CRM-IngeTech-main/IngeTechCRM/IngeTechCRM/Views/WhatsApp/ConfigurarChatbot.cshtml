@model IEnumerable<IngeTechCRM.Models.ConfiguracionChatbot>
@{
    ViewData["Title"] = "Configuración del Chatbot";
}

<div class="container mx-auto px-4 py-8">
    <!-- Breadcrumbs -->
    <nav class="mb-6 flex flex-wrap text-sm">
        <a href="@Url.Action("Index", "Home")" class="text-gray-600 hover:text-indigo-600">Inicio</a>
        <span class="mx-2 text-gray-500">/</span>
        <a href="@Url.Action("Index")" class="text-gray-600 hover:text-indigo-600">Gestión de WhatsApp</a>
        <span class="mx-2 text-gray-500">/</span>
        <span class="font-medium text-gray-800">Configuración del Chatbot</span>
    </nav>

    <!-- Encabezado -->
    <div class="mb-8 flex flex-wrap items-center justify-between">
        <div>
            <h1 class="text-3xl font-bold text-gray-800">Configuración del Chatbot</h1>
            <p class="mt-2 text-gray-600">Administre las respuestas automáticas del chatbot</p>
        </div>
        <button id="btnAgregarConfig" class="flex items-center rounded-lg bg-purple-600 px-4 py-2 font-medium text-white shadow transition hover:bg-purple-700">
            <i class="fas fa-plus mr-2"></i> Nueva Configuración
        </button>
    </div>

    <!-- Mensajes de notificación -->
    @if (TempData["Message"] != null)
    {
        <div class="mb-6 rounded-lg bg-green-100 p-4 text-green-700">
            <div class="flex items-center">
                <i class="fas fa-check-circle mr-2"></i>
                <span>@TempData["Message"]</span>
            </div>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="mb-6 rounded-lg bg-red-100 p-4 text-red-700">
            <div class="flex items-center">
                <i class="fas fa-exclamation-circle mr-2"></i>
                <span>@TempData["Error"]</span>
            </div>
        </div>
    }

    <!-- Explicación de tipos de configuración -->
    <div class="mb-8 rounded-lg bg-blue-50 p-4 text-sm text-blue-800">
        <h3 class="font-semibold mb-2">Tipos de configuración:</h3>
        <ul class="list-disc pl-5 space-y-1">
            <li><span class="font-medium">Bienvenida:</span> Mensaje que se envía cuando un usuario inicia una conversación por primera vez.</li>
            <li><span class="font-medium">Default:</span> Respuesta que se envía cuando no se detecta ninguna intención específica.</li>
            <li><span class="font-medium">PalabraClave:</span> Respuestas asociadas a palabras clave específicas en los mensajes del usuario.</li>
        </ul>
        <p class="mt-2">
            <i class="fas fa-info-circle mr-1"></i> En los mensajes puede usar la variable <code>{nombre}</code> que será reemplazada por el nombre del usuario si está disponible.
        </p>
    </div>

    <!-- Tabla de Configuraciones -->
    <div class="overflow-hidden rounded-xl bg-white shadow-lg">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">ID</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">Tipo</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">Palabra Clave</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">Respuesta</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">Estado</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">Acciones</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-200 bg-white">
                    @if (Model != null && Model.Any())
                    {
                        foreach (var item in Model)
                        {
                            <tr class="hover:bg-gray-50">
                                <td class="whitespace-nowrap px-6 py-4 text-sm font-medium text-gray-900">@item.ID_CONFIGURACION</td>
                                <td class="whitespace-nowrap px-6 py-4 text-sm text-gray-500">
                                    @{
                                        string claseTipo = "bg-gray-100 text-gray-800";
                                        if (item.TIPO == "Bienvenida")
                                        {
                                            claseTipo = "bg-green-100 text-green-800";
                                        }
                                        else if (item.TIPO == "Default")
                                        {
                                            claseTipo = "bg-blue-100 text-blue-800";
                                        }
                                        else if (item.TIPO == "PalabraClave")
                                        {
                                            claseTipo = "bg-purple-100 text-purple-800";
                                        }
                                    }
                                    <span class="rounded-full @claseTipo px-3 py-1 text-xs font-medium">
                                        @item.TIPO
                                    </span>
                                </td>
                                <td class="whitespace-nowrap px-6 py-4 text-sm text-gray-500">
                                    @(string.IsNullOrEmpty(item.PALABRA_CLAVE) ? "-" : item.PALABRA_CLAVE)
                                </td>
                                <td class="px-6 py-4 text-sm text-gray-500 max-w-sm truncate">
                                    @item.RESPUESTA
                                </td>
                                <td class="whitespace-nowrap px-6 py-4 text-sm text-gray-500">
                                    @if (item.ACTIVO)
                                    {
                                        <span class="rounded-full bg-green-100 px-3 py-1 text-xs font-medium text-green-800">
                                            Activo
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="rounded-full bg-red-100 px-3 py-1 text-xs font-medium text-red-800">
                                            Inactivo
                                        </span>
                                    }
                                </td>
                                <td class="whitespace-nowrap px-6 py-4 text-sm font-medium">
                                    <div class="flex space-x-2">
                                        <button type="button" onclick="editarConfiguracion(@item.ID_CONFIGURACION)" class="rounded-full bg-blue-100 p-2 text-blue-600 transition hover:bg-blue-200" title="Editar">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button type="button" onclick="eliminarConfiguracion(@item.ID_CONFIGURACION)" class="rounded-full bg-red-100 p-2 text-red-600 transition hover:bg-red-200" title="Eliminar">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="py-10 text-center text-gray-500">
                                <div class="flex flex-col items-center justify-center">
                                    <i class="fas fa-robot text-4xl text-gray-300 mb-3"></i>
                                    <p>No hay configuraciones de chatbot registradas en el sistema.</p>
                                    <button id="btnNoConfig" class="mt-2 text-indigo-600 hover:underline">Agregar nueva configuración</button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modal para agregar/editar configuración -->
<div id="modalConfiguracion" class="fixed inset-0 flex items-center justify-center z-50 hidden">
    <div class="fixed inset-0 bg-black opacity-50"></div>
    <div class="bg-white rounded-lg p-6 w-full max-w-md relative z-10">
        <h3 id="modalTitle" class="text-xl font-bold text-gray-800 mb-4">Nueva Configuración</h3>
        <form id="formConfiguracion" action="@Url.Action("GuardarConfiguracion")" method="post">
            @Html.AntiForgeryToken()
            <input type="hidden" id="configId" name="Id" value="0" />

            <div class="mb-4">
                <label for="configTipo" class="block text-sm font-medium text-gray-700 mb-1">Tipo</label>
                <select id="configTipo" name="Tipo" required
                        class="w-full rounded-lg border border-gray-300 p-2 focus:border-indigo-500 focus:outline-none focus:ring-1 focus:ring-indigo-500">
                    <option value="">-- Seleccione un tipo --</option>
                    <option value="Bienvenida">Bienvenida</option>
                    <option value="Default">Default</option>
                    <option value="PalabraClave">Palabra Clave</option>
                </select>
            </div>

            <div id="divPalabraClave" class="mb-4 hidden">
                <label for="configPalabraClave" class="block text-sm font-medium text-gray-700 mb-1">Palabra Clave</label>
                <input type="text" id="configPalabraClave" name="PalabraClave"
                       class="w-full rounded-lg border border-gray-300 p-2 focus:border-indigo-500 focus:outline-none focus:ring-1 focus:ring-indigo-500"
                       placeholder="Palabra o frase que activa la respuesta" />
            </div>

            <div class="mb-4">
                <label for="configRespuesta" class="block text-sm font-medium text-gray-700 mb-1">Respuesta</label>
                <textarea id="configRespuesta" name="Respuesta" rows="4" required
                          class="w-full rounded-lg border border-gray-300 p-2 focus:border-indigo-500 focus:outline-none focus:ring-1 focus:ring-indigo-500"
                          placeholder="Escribe la respuesta del chatbot aquí"></textarea>
                <p class="mt-1 text-xs text-gray-500">Puedes usar {nombre} para incluir el nombre del usuario si está disponible.</p>
            </div>

            <div class="mb-4">
                <label class="flex items-center">
                    <input type="checkbox" id="configActivo" name="Activo" checked
                           class="rounded border-gray-300 text-indigo-600 focus:ring-indigo-500" />
                    <span class="ml-2 text-sm text-gray-700">Activo</span>
                </label>
            </div>

            <div class="flex justify-end space-x-2">
                <button type="button" id="btnCancelarConfig" class="rounded-lg bg-gray-100 px-4 py-2 text-gray-700 hover:bg-gray-200">
                    Cancelar
                </button>
                <button type="submit" class="rounded-lg bg-indigo-600 px-4 py-2 text-white hover:bg-indigo-700">
                    Guardar
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        // Variables globales para las configuraciones
        let configuraciones = @Html.Raw(Json.Serialize(Model));

        // Mostrar/ocultar campo de palabra clave según el tipo seleccionado
        document.getElementById('configTipo').addEventListener('change', function() {
            const divPalabraClave = document.getElementById('divPalabraClave');
            if (this.value === 'PalabraClave') {
                divPalabraClave.classList.remove('hidden');
                document.getElementById('configPalabraClave').required = true;
            } else {
                divPalabraClave.classList.add('hidden');
                document.getElementById('configPalabraClave').required = false;
                document.getElementById('configPalabraClave').value = '';
            }
        });

        // Abrir modal para nueva configuración
        document.getElementById('btnAgregarConfig').addEventListener('click', function() {
            openConfigModal();
        });

        // Si no hay configuraciones, también conectar el botón dentro de la tabla vacía
        const btnNoConfig = document.getElementById('btnNoConfig');
        if (btnNoConfig) {
            btnNoConfig.addEventListener('click', function() {
                openConfigModal();
            });
        }

        // Cerrar modal
        document.getElementById('btnCancelarConfig').addEventListener('click', function() {
            document.getElementById('modalConfiguracion').classList.add('hidden');
        });

        // Función para abrir el modal (nueva configuración)
        function openConfigModal() {
            // Reiniciar formulario
            document.getElementById('formConfiguracion').reset();
            document.getElementById('configId').value = '0';
            document.getElementById('modalTitle').textContent = 'Nueva Configuración';
            document.getElementById('divPalabraClave').classList.add('hidden');

            // Mostrar modal
            document.getElementById('modalConfiguracion').classList.remove('hidden');
        }

        // Función para editar configuración existente
        function editarConfiguracion(id) {
            const config = configuraciones.find(c => c.id === id);
            if (!config) return;

            // Llenar formulario con datos
            document.getElementById('configId').value = config.id;
            document.getElementById('configTipo').value = config.tipo;
            document.getElementById('configPalabraClave').value = config.palabraClave || '';
            document.getElementById('configRespuesta').value = config.respuesta;
            document.getElementById('configActivo').checked = config.activo;

            // Mostrar/ocultar campo palabra clave
            const divPalabraClave = document.getElementById('divPalabraClave');
            if (config.tipo === 'PalabraClave') {
                divPalabraClave.classList.remove('hidden');
            } else {
                divPalabraClave.classList.add('hidden');
            }

            // Actualizar título del modal
            document.getElementById('modalTitle').textContent = 'Editar Configuración';

            // Mostrar modal
            document.getElementById('modalConfiguracion').classList.remove('hidden');
        }

        // Función para eliminar configuración
        function eliminarConfiguracion(id) {
            if (confirm('¿Está seguro que desea eliminar esta configuración?')) {
                fetch('@Url.Action("EliminarConfiguracion")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ id: id })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Refrescar la página para ver los cambios
                        location.reload();
                    } else {
                        alert('Error al eliminar configuración');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Ha ocurrido un error al procesar la solicitud.');
                });
            }
        }
    </script>
}